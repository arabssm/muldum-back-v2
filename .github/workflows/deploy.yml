name: Deploy to EC2 with Docker Compose

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. JDK 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. gradlew 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. 빌드 실행 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 5. 빌드 결과 확인
      - name: Check build output
        run: ls -al ./build/libs

      # 6. .env 파일 생성
      - name: Generate .env file
        run: |
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_USER_INFO_URL=${{ secrets.GOOGLE_USER_INFO_URL }}" >> .env
          echo "GOOGLE_TOKEN_URL=${{ secrets.GOOGLE_TOKEN_URL }}" >> .env
          echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> .env
          
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_BUCKET_ACCESS_KEY }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_BUCKET_SECRET_KEY }}" >> .env
          echo "AWS_BUCKET_REGION=${{ secrets.AWS_BUCKET_REGION }}" >> .env
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_BUCKET_REGION }}" >> .env
          
          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
          echo "DEFAULT_TEAM_BANNER_IMAGE=${{ secrets.DEFAULT_TEAM_BANNER_IMAGE }}" >> .env

      # 7. EC2로 파일 전송 (app.jar + 필요한 파일들)
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            build/libs/app.jar
            Dockerfile
            compose.yaml
            .env
            wait-for-it.sh
          target: /home/ubuntu/app/

      # 8. EC2에서 setup.sh 실행
      - name: Setup EC2 Environment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu
            if [ ! -d "setup.sh" ]; then
              git clone https://github.com/HyunwooKiim/setup.sh.git
            fi
            cd setup.sh
            chmod +x setup.sh
            ./setup.sh

      # 9. docker compose 실행
      - name: Deploy Application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/app
            echo ">>> Building docker image"
            docker compose build --no-cache
            echo ">>> Restarting containers"
            docker compose down
            docker compose up -d